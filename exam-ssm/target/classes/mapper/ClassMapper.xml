<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ssm.dao.ClassMapper">
  <resultMap id="BaseResultMap" type="ssm.model.Class">
    <result column="ClassId" jdbcType="INTEGER" property="classid" />
    <result column="ClaName" jdbcType="VARCHAR" property="claname" />
    <result column="ProId" jdbcType="INTEGER" property="proid" />
  </resultMap>
  
   <!-- 自定义方法 -->
  <select id="findAll" resultMap="ClassResultMap">
     select * from profession ,class,yuanxi where profession.ProId=class.ProId AND yuanxi.YuId=profession.YuId
  </select>
  
   <select id="getById" resultMap="ClassResultMap">
      select * from class where  ClassId=#{classid}
  </select>
  
  <select id="getByNam" resultMap="ClassResultMap">
      select * from class where  ClaName=#{claname}
  </select>
  
  <select id="queryfind" resultMap="ClassResultMap">
      select * from class,profession
      <where>
            <if test="#{query}!=null">
            ${type} like CONCAT('%',#{query},'%')
            </if>                    
      </where> 
      and profession.ProId=class.ProId
  </select>
  
  <delete id="deleteByid">
      delete from class where ClassId=#{classid}
  </delete>
  
  <update id="updateByid" >
      update class set ClassId=#{classid},ClaName=#{claname},ProId=#{proid} where ClassId=#{classid}
  </update>
  
  <insert id="addCla" >
      insert into class values(#{classid},#{claname},#{proid})
  </insert>
  
  <select id="getByProid" resultMap="ClassResultMap">
      select * from class,profession where  class.ProId=#{proid} and profession.ProId=class.ProId
  </select>
  
   <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
  <resultMap type="ssm.model.Class" id="ClassResultMap">
        <result column="ClassId" jdbcType="INTEGER" property="classid" />
        <result column="ClaName" jdbcType="VARCHAR" property="claname" />	 
	    <result column="ProId" jdbcType="INTEGER" property="proid" />	     
        <association property="profession" javaType="ssm.model.Profession">
            <id property="proid" column="ProId"/>
            <result property="proname" column="ProName"/>
       </association>
      <association property="yuanxi" javaType="ssm.model.Yuanxi">
          <id property="yuid" column="YuId"/>
          <result property="yunam" column="YuNam"/>
      </association>
    </resultMap>
  <!-- <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ClassId, ClaName, ProId
  </sql>
  <select id="selectByExample" parameterType="ssm.model.ClassExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="ssm.model.ClassExample">
    delete from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="ssm.model.Class">
    insert into class (ClassId, ClaName, ProId
      )
    values (#{classid,jdbcType=INTEGER}, #{claname,jdbcType=VARCHAR}, #{proid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="ssm.model.Class">
    insert into class
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        ClassId,
      </if>
      <if test="claname != null">
        ClaName,
      </if>
      <if test="proid != null">
        ProId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="claname != null">
        #{claname,jdbcType=VARCHAR},
      </if>
      <if test="proid != null">
        #{proid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ssm.model.ClassExample" resultType="java.lang.Long">
    select count(*) from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update class
    <set>
      <if test="record.classid != null">
        ClassId = #{record.classid,jdbcType=INTEGER},
      </if>
      <if test="record.claname != null">
        ClaName = #{record.claname,jdbcType=VARCHAR},
      </if>
      <if test="record.proid != null">
        ProId = #{record.proid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update class
    set ClassId = #{record.classid,jdbcType=INTEGER},
      ClaName = #{record.claname,jdbcType=VARCHAR},
      ProId = #{record.proid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update> -->
  <!-- <resultMap id="BaseResultMap" type="ssm.model.Class">
    <result column="ClassId" jdbcType="INTEGER" property="classid" />
    <result column="ClaName" jdbcType="VARCHAR" property="claname" />
    <result column="ProId" jdbcType="INTEGER" property="proid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ClassId, ClaName, ProId
  </sql>
  <select id="selectByExample" parameterType="ssm.model.ClassExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="ssm.model.ClassExample">
    delete from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="ssm.model.Class">
    insert into class (ClassId, ClaName, ProId
      )
    values (#{classid,jdbcType=INTEGER}, #{claname,jdbcType=VARCHAR}, #{proid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="ssm.model.Class">
    insert into class
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        ClassId,
      </if>
      <if test="claname != null">
        ClaName,
      </if>
      <if test="proid != null">
        ProId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classid != null">
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="claname != null">
        #{claname,jdbcType=VARCHAR},
      </if>
      <if test="proid != null">
        #{proid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ssm.model.ClassExample" resultType="java.lang.Long">
    select count(*) from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update class
    <set>
      <if test="record.classid != null">
        ClassId = #{record.classid,jdbcType=INTEGER},
      </if>
      <if test="record.claname != null">
        ClaName = #{record.claname,jdbcType=VARCHAR},
      </if>
      <if test="record.proid != null">
        ProId = #{record.proid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update class
    set ClassId = #{record.classid,jdbcType=INTEGER},
      ClaName = #{record.claname,jdbcType=VARCHAR},
      ProId = #{record.proid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update> -->
</mapper>